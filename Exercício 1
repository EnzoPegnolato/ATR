#include <chrono>
#include <fstream>
#include <iostream>
#include <stack>
#include <thread>
#include <vector>

// Representação do labirinto
using Maze = std::vector<std::vector<char>>;

// Estrutura para representar uma posição no labirinto
struct Position {
  int row;
  int col;
};

// Variáveis globais
Maze maze;
int num_rows;
int num_cols;
std::stack<Position> valid_positions;

// Função para carregar o labirinto de um arquivo
Position load_maze(const std::string &nome_arquivo) {
  std::ifstream file(nome_arquivo);
  if (!file) {
    std::cerr << "Erro ao abrir o arquivo: " << nome_arquivo << std::endl;
    return {-1, -1};
  }

  // Lê o número de linhas e colunas
  file >> num_rows >> num_cols;

  // Redimensiona a matriz
  maze.resize(num_rows, std::vector<char>(num_cols));

  Position pos_inicial{-1, -1};

  // Lê o conteúdo do labirinto caractere por caractere
  for (int i = 0; i < num_rows; ++i) {
    for (int j = 0; j < num_cols; ++j) {
      file >> maze[i][j];
      if (maze[i][j] == 'e') {
        pos_inicial = {i, j}; // Posição inicial encontrada
      }
    }
  }

  file.close();
  return pos_inicial;
}

// Função para imprimir o labirinto
void print_maze(const Position &pos_atual) {
  for (int i = 0; i < num_rows; ++i) {
    for (int j = 0; j < num_cols; ++j) {
      if (i == pos_atual.row && j == pos_atual.col) {
        std::cout << 'o';
      } else if (maze[i][j] == '.') {
        std::cout << '.';
      } else {
        std::cout << maze[i][j];
      }
    }
    std::cout << '\n';
  }
}

// Função para verificar se uma posição é válida
bool is_valid_position(int row, int col) {
  // Verifica se a posição está dentro dos limites e é um caminho válido
  return (row >= 0 && row < num_rows && col >= 0 && col < num_cols &&
          (maze[row][col] == 'x' || maze[row][col] == 's'));
}

// Função principal para navegar pelo labirinto
bool walk(Position pos) {
  // Verifica se a posição atual é a saída
  if (maze[pos.row][pos.col] == 's') {
    return true;
  }

  // Marca a posição atual como visitada
  maze[pos.row][pos.col] = '.';

  // Mostra o estado atual do labirinto
  print_maze(pos);

  // Adiciona um atraso para visualização
  std::this_thread::sleep_for(std::chrono::milliseconds(50));

  // Verifica as posições adjacentes
  std::vector<Position> vizinhoss = {
      {pos.row - 1, pos.col}, // cima
      {pos.row + 1, pos.col}, // baixo
      {pos.row, pos.col - 1}, // esquerda
      {pos.row, pos.col + 1}  // direita
  };

  for (const auto &vizinhos : vizinhoss) {
    if (is_valid_position(vizinhos.row, vizinhos.col)) {
      valid_positions.push(vizinhos);
    }
  }

  // Explora as posições válidas enquanto existirem
  while (!valid_positions.empty()) {
    Position pos_proxima = valid_positions.top();
    valid_positions.pop();
    if (walk(pos_proxima)) {
      return true;
    }
  }

  return false;
}

int main() {
  std::string nome_arquivo = "maze4.txt"; // Nome do arquivo fixo no código

  Position initial_pos = load_maze(nome_arquivo);
  if (initial_pos.row == -1 || initial_pos.col == -1) {
    std::cerr << "Posição inicial não encontrada no labirinto." << std::endl;
    return 1;
  }

  bool exit_found = walk(initial_pos);

  if (exit_found) {
    std::cout << "Saída encontrada!" << std::endl;
  } else {
    std::cout << "Não foi possível encontrar a saída." << std::endl;
  }

  return 0;
}
