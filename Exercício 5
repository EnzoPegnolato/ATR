#include <cstdlib>
#include <iostream>
#include <memory>
#include <utility>
#include <boost/asio.hpp>
#include <fstream>
#include <sstream>
#include <ctime>
#include <iomanip>
#include <filesystem>
#include <vector>
#include <array>
#include <optional>

using boost::asio::ip::tcp;
std::vector<std::string> valid_ids; 

const std::string ERROR_MSG = "ERROR|INVALID_SENSOR_ID\r\n";

// Function declarations
void save_data(const std::string& msg);
std::string create_message(const std::string& msg);
bool isRegistered(const std::vector<std::string>& vector, const std::string& currentID);
void write_error_message(const std::string& message);

#pragma pack(push, 1)
struct LogRecord {
		std::array<char, 32> sensor_id; // ID do sensor
		std::time_t timestamp; // timestamp UNIX
		double value; // valor da leitura
};
#pragma pack(pop)

std::time_t string_to_time_t(const std::string& time_string) {
		std::tm tm = {};
		std::istringstream ss(time_string);
		ss >> std::get_time(&tm, "%Y-%m-%dT%H:%M:%S");
		return std::mktime(&tm);
}

std::string time_t_to_string(std::time_t time) {
		std::tm* tm = std::localtime(&time);
		std::ostringstream ss;
		ss << std::put_time(tm, "%Y-%m-%dT%H:%M:%S");
		return ss.str();
}

void parseLogMessage(const std::string& mensagem, LogRecord& rec) {
		std::istringstream iss(mensagem);
		std::string token;

		std::getline(iss, token, '|'); // Ignora "LOG"
		std::getline(iss, token, '|'); // Obtém SENSOR_ID
		std::strncpy(rec.sensor_id.data(), token.c_str(), rec.sensor_id.size());

		std::getline(iss, token, '|'); // Obtém DATA_HORA
		rec.timestamp = string_to_time_t(token);

		std::getline(iss, token, '|'); // Obtém LEITURA
		rec.value = std::stod(token);
}

void parseGetMessage(const std::string& mensagem, std::array<char, 32>& sensor_id, int& num_records) {
		std::istringstream iss(mensagem);
		std::string token;

		std::getline(iss, token, '|'); // Ignora "GET"
		std::getline(iss, token, '|'); // Obtém SENSOR_ID
		std::strncpy(sensor_id.data(), token.c_str(), sensor_id.size());

		std::getline(iss, token, '|'); // Obtém num_records
		num_records = std::stoi(token);
}

class session : public std::enable_shared_from_this<session> {
public:
		session(tcp::socket socket) : socket_(std::move(socket)) {}

		void start() {
				read_message();
		}

private:
		void read_message() {
				auto self(shared_from_this());
				boost::asio::async_read_until(socket_, buffer_, "\r\n",
						[this, self](boost::system::error_code ec, std:: size_t length) {
								if (!ec) {
										std::istream is(&buffer_);
										std::string message(std::istreambuf_iterator<char>(is), {});

										std::cout << "Received: " << message << std::endl;

										std::string command = message.substr(0, 3);
										std::cout << "Comando recebido: " << command << std::endl;

										LogRecord currentID;
										parseLogMessage(message, currentID);

										if (command == "LOG") {
												if (!isRegistered(valid_ids, std::string(currentID.sensor_id.data()))) {
														std::cout << currentID.sensor_id.data() << " added" << std::endl;
														valid_ids.push_back(std::string(currentID.sensor_id.data()));
												}
												save_data(message);
												read_message();
										} else if (command == "GET") {
												if (!isRegistered(valid_ids, std::string(currentID.sensor_id.data()))) {
														write_message(ERROR_MSG);
												} else {
														write_message(message);
												}
										}
								}
						});
		}

		void write_message(const std::string& message) {
				auto self(shared_from_this());
				std::string new_message = (message == ERROR_MSG) ? ERROR_MSG : create_message(message);

				boost::asio::async_write(socket_, boost::asio::buffer(new_message),
						[this, self](boost::system::error_code ec, std::size_t /*length*/) {
								if (!ec) {
										read_message();
								}
						});
		}

		tcp::socket socket_;
		boost::asio::streambuf buffer_;
};

class server {
public:
		server(boost::asio::io_context& io_context, short port)
				: acceptor_(io_context, tcp::endpoint(tcp::v4(), port)) {
				accept();
		}

private:
		void accept() {
				acceptor_.async_accept(
						[this](boost::system::error_code ec, tcp::socket socket) {
								if (!ec) {
										std::make_shared<session>(std::move(socket))->start();
								}
								accept();
						});
		}

		tcp::acceptor acceptor_;
};

int main(int argc, char* argv[]) {
		if (argc != 2) {
				std::cerr << "Usage: chat_server <port>\n";
				return 1;
		}

		boost::asio::io_context io_context;
		server s(io_context, std::atoi(argv[1]));
		io_context.run();

		return 0;
}

// Implementing functions

void save_data(const std::string& msg) {
		std::cout << "Criando arquivo binário" << std::endl;
		LogRecord rec;
		parseLogMessage(msg, rec);

		std::string file_name = std::string(rec.sensor_id.data()) + ".dat";
		std::fstream file(file_name, std::fstream::out | std::fstream::in | std::fstream::binary | std::fstream::app);

		if (file.is_open()) {
				file.seekp(0, std::ios_base::end);
				file.write(reinterpret_cast<char*>(&rec), sizeof(LogRecord));
				std::cout << "Record saved to " << file_name << std::endl;
				file.close();
		} else {
				std::cout << "Error opening file!" << std::endl;
		}
}

std::string create_message(const std::string& msg) {
		std::cout << "Retornando arquivo binário" << std::endl;
		int NUM_RECORDS;
		std::array<char, 32> sensor_id;

		parseGetMessage(msg, sensor_id, NUM_RECORDS);
		std::string records_string;
		std::string file_name = std::string(sensor_id.data()) + ".dat";

		std::fstream file(file_name, std::fstream::in | std::fstream::binary);
		if (file.is_open()) {
				LogRecord rec;
				std::uintmax_t file_size = std::filesystem::file_size(file_name);
				int n = file_size / sizeof(LogRecord);

				if (n < NUM_RECORDS) NUM_RECORDS = n;

				for (int i = 0; i < NUM_RECORDS; i++) {
						file.read(reinterpret_cast<char*>(&rec), sizeof(LogRecord));
						records_string += "Sensor ID: " + std::string(rec.sensor_id.data()) + ", Timestamp: " + time_t_to_string(rec.timestamp) + ", Value: " + std::to_string(rec.value) + "\n";
				}
				file.close();
		} else {
				std::cout << "Error opening file!" << std::endl;
		}

		return records_string;
}

bool isRegistered(const std::vector<std::string>& vector, const std::string& currentID) {
		return std::find(vector.begin(), vector.end(), currentID) != vector.end();
}
