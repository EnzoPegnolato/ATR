#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <array>
#include <cstdlib>
#include <ctime>

// Classe que implementa a lógica do jogo da velha
class JogoDaVelha {
public:
		// Construtor que inicializa o tabuleiro vazio, o jogador atual e outros parâmetros
		JogoDaVelha() : jogador_atual('X'), jogo_terminado(false), vencedor(' ') {
				// Inicializa o tabuleiro com espaços vazios
				tabuleiro.fill({' ', ' ', ' '});
		}

		// Exibe o estado atual do tabuleiro no console
		void exibir_tabuleiro() const {
				std::cout << "\nTabuleiro:\n";
				for (int i = 0; i < 3; ++i) {
						for (int j = 0; j < 3; ++j) {
								std::cout << tabuleiro[i][j]; // Mostra o conteúdo de cada célula
								if (j < 2) std::cout << " | "; // Adiciona separadores entre colunas
						}
						std::cout << "\n";
						if (i < 2) std::cout << "--+---+--\n"; // Adiciona separadores entre linhas
				}
				std::cout << std::endl;
		}

		// Realiza a jogada no tabuleiro na linha e coluna especificadas
		bool fazer_jogada(char jogador, int linha, int coluna) {
				std::lock_guard<std::mutex> lock(mutex_tabuleiro); // Garante que a jogada será feita de forma atômica
				if (tabuleiro[linha][coluna] == ' ') { // Verifica se a célula está vazia
						tabuleiro[linha][coluna] = jogador; // Marca a jogada do jogador
						exibir_tabuleiro(); // Exibe o tabuleiro após a jogada
						if (verificar_vencedor(jogador)) { // Verifica se o jogador venceu
								vencedor = jogador;
								jogo_terminado = true;
						} else if (verificar_empate()) { // Verifica se houve empate
								vencedor = 'E';  // E representa empate (Empate)
								jogo_terminado = true;
						}
						return true; // Jogada válida
				}
				return false; // Jogada inválida
		}

		// Verifica se o jogador atual venceu (3 símbolos consecutivos)
		bool verificar_vencedor(char jogador) const {
				// Verifica todas as linhas
				for (int i = 0; i < 3; ++i)
						if (tabuleiro[i][0] == jogador && tabuleiro[i][1] == jogador && tabuleiro[i][2] == jogador) return true;

				// Verifica todas as colunas
				for (int j = 0; j < 3; ++j)
						if (tabuleiro[0][j] == jogador && tabuleiro[1][j] == jogador && tabuleiro[2][j] == jogador) return true;

				// Verifica diagonais
				if (tabuleiro[0][0] == jogador && tabuleiro[1][1] == jogador && tabuleiro[2][2] == jogador) return true;
				if (tabuleiro[0][2] == jogador && tabuleiro[1][1] == jogador && tabuleiro[2][0] == jogador) return true;

				return false; // Nenhuma condição de vitória
		}

		// Verifica se o jogo empatou (todas as células preenchidas e sem vencedor)
		bool verificar_empate() const {
				for (const auto& linha : tabuleiro) {
						for (char celula : linha) {
								if (celula == ' ') return false; // Ainda há espaços vazios, não é empate
						}
				}
				return true; // Não há espaços vazios, é empate
		}

		// Retorna se o jogo terminou ou não
		bool jogo_acabou() const {
				return jogo_terminado;
		}

		// Retorna o vencedor do jogo ('X', 'O', ou 'E' para empate)
		char obter_vencedor() const {
				return vencedor;
		}

		// Alterna o turno para o próximo jogador ('X' ou 'O')
		void alternar_turno() {
				std::unique_lock<std::mutex> lock(mutex_tabuleiro); // Trava o mutex
				jogador_atual = (jogador_atual == 'X') ? 'O' : 'X'; // Alterna entre 'X' e 'O'
				cond_var_turno.notify_all(); // Notifica as threads aguardando o turno
		}

		// Aguarda até que seja a vez do jogador atual ou o jogo tenha terminado
		void esperar_turno(char jogador) {
				std::unique_lock<std::mutex> lock(mutex_tabuleiro); // Trava o mutex
				cond_var_turno.wait(lock, [&] { return jogador_atual == jogador || jogo_terminado; }); // Espera pelo turno ou pelo fim do jogo
		}

private:
		std::array<std::array<char, 3>, 3> tabuleiro; // Representa o tabuleiro 3x3
		mutable std::mutex mutex_tabuleiro; // Mutex para proteger o acesso ao tabuleiro
		std::condition_variable cond_var_turno; // Variável de condição para alternar turnos
		char jogador_atual; // Jogador atual ('X' ou 'O')
		bool jogo_terminado; // Indica se o jogo terminou
		char vencedor; // Vencedor ('X', 'O', ou 'E' para empate)
};

// Classe que representa um jogador do jogo da velha
class Jogador {
public:
		// Construtor que recebe o jogo, o símbolo do jogador e a estratégia
		Jogador(JogoDaVelha& jogo, char simbolo, const std::string& estrategia)
				: jogo(jogo), simbolo(simbolo), estrategia(estrategia) {}

		// Função principal do jogador, onde ele realiza as jogadas
		void jogar() {
				while (!jogo.jogo_acabou()) { // Enquanto o jogo não terminou
						jogo.esperar_turno(simbolo); // Espera sua vez
						if (jogo.jogo_acabou()) break; // Se o jogo terminou, interrompe

						// Realiza a jogada de acordo com a estratégia escolhida
						if (estrategia == "sequencial")
								jogar_sequencial();
						else
								jogar_aleatorio();

						jogo.alternar_turno(); // Alterna para o próximo jogador
				}
		}

private:
		JogoDaVelha& jogo; // Referência ao objeto do jogo
		char simbolo; // Símbolo do jogador ('X' ou 'O')
		std::string estrategia; // Estratégia do jogador (sequencial ou aleatória)

		// Realiza a jogada de forma sequencial (procura a primeira célula vazia)
		void jogar_sequencial() {
				for (int i = 0; i < 3; ++i) {
						for (int j = 0; j < 3; ++j) {
								if (jogo.fazer_jogada(simbolo, i, j)) // Faz a jogada
										return;
						}
				}
		}

		// Realiza a jogada de forma aleatória (escolhe uma célula aleatória)
		void jogar_aleatorio() {
				while (true) {
						int linha = rand() % 3; // Gera linha aleatória
						int coluna = rand() % 3; // Gera coluna aleatória
						if (jogo.fazer_jogada(simbolo, linha, coluna)) // Faz a jogada
								break;
				}
		}
};

int main() {
		srand(static_cast<unsigned>(time(0)));  // Inicializa a semente para números aleatórios
		JogoDaVelha jogo; // Cria o objeto do jogo

		// Cria dois jogadores, um com a estratégia sequencial e outro com a estratégia aleatória
		Jogador jogadorX(jogo, 'X', "sequencial");
		Jogador jogadorO(jogo, 'O', "aleatorio");

		// Inicia as threads para cada jogador
		std::thread t1(&Jogador::jogar, &jogadorX);
		std::thread t2(&Jogador::jogar, &jogadorO);

		// Espera as threads terminarem
		t1.join();
		t2.join();

		// Exibe o resultado do jogo
		char vencedor = jogo.obter_vencedor();
		if (vencedor == 'E')
				std::cout << "O jogo terminou em empate!\n"; // Empate
		else
				std::cout << "Jogador " << vencedor << " venceu!\n"; // Vitória de 'X' ou 'O'

		return 0;
}
